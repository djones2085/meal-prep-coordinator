rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      // Assumes user profile exists and has a 'roles' array field
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             'admin' in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles;
    }

    // Helper function to check if the user is a shopper
    function isShopper() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             'shopper' in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles;
    }

    // Allow users to create, read, and update their own user document
    match /users/{userId} {
      // Allow creation only if the user is logged in and their UID matches the document ID
      allow create: if request.auth != null && request.auth.uid == userId;
      // Allow reading and updating only by the owner of the document or by an admin
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      // Allow updating only by the owner of the document or by an admin
      allow update: if request.auth != null && 
                      (request.auth.uid == userId || isAdmin());
      // Prevent deletion for now
      allow delete: if false; // Or if isAdmin();
      // TODO: Add isAdmin field or use custom claims for admin role check
    }

    // Placeholder rule: Allow any authenticated user to read recipes for now
    // We'll refine this later based on roles (admin, cook, etc.)
    match /recipes/{recipeId} {
       allow read: if request.auth != null;
       allow create: if isAdmin(); // TODO: Restrict to admin -> DONE (using isAdmin() directly)
       allow update, delete: if isAdmin();
    }

    // Meal Cycles: Rules refined for shopping list and general admin actions
    match /mealCycles/{cycleId} {
      allow read: if request.auth != null;
      allow create: if isAdmin(); // Cycle creation restricted to admins

      allow update: if request.auth != null && (
        // Rule 1: Admin can update general cycle fields and overall shopping list status attributes (excluding item modifications here)
        (isAdmin() &&
          (
            request.resource.data.status != resource.data.status ||
            request.resource.data.chosenRecipe != resource.data.chosenRecipe ||
            request.resource.data.name != resource.data.name ||
            request.resource.data.orderDeadline != resource.data.orderDeadline ||
            request.resource.data.targetCookDate != resource.data.targetCookDate ||
            // Admin can also change shoppingList status (e.g., to 'shopping_in_progress', 'completed') and its timestamps directly
            request.resource.data.shoppingList.status != resource.data.shoppingList.status ||
            request.resource.data.shoppingList.lastUpdatedAt == request.time
            // Add other specific admin-modifiable top-level cycle fields if any
          ) &&
          // Ensure only allowed fields are changing for general admin update on the cycle or specific shoppingList status fields.
          // This rule implicitly means if shoppingList.items is part of affectedKeys, this specific admin rule branch won't allow it.
          // It relies on the client sending ONLY the fields it intends to change.
          // A more robust check would explicitly list all allowed fields using hasOnly() on the diff, 
          // but that can get long. The shoppingList.items check below is more crucial for non-admins.
          // For this branch, we assume admin might be updating several related fields.
          true // Let's simplify for now: if admin, they can update these listed cycle fields or SL status fields.
        ) ||

        // Rule 2: Admin approving a shopping list (pending_approval -> approved)
        (isAdmin() &&
          request.resource.data.shoppingList.status == 'approved' &&
          resource.data.shoppingList.status == 'pending_approval' &&
          request.resource.data.shoppingList.approvedBy == request.auth.uid &&
          request.resource.data.shoppingList.approvedAt == request.time &&
          request.resource.data.shoppingList.lastUpdatedAt == request.time &&
          // Ensure only these specific shoppingList approval fields (and potentially items if admin edits during approval - not current scope) are changing
          request.resource.data.shoppingList.diff(resource.data.shoppingList).affectedKeys()
            .hasOnly(['status', 'approvedBy', 'approvedAt', 'lastUpdatedAt']) &&
          // Ensure no other top-level cycle fields are changing during this specific approval action
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['shoppingList'])
        ) ||

        // Rule 3: Shopper (or Admin) updating onHandQuantity for shopping list items
        ((isShopper() || isAdmin()) &&
          resource.data.shoppingList != null && // Shopping list must exist
          resource.data.shoppingList.status in ['approved', 'shopping_in_progress'] && // And be in an active state for shopping
          request.resource.data.shoppingList.lastUpdatedAt == request.time && // Timestamp must be updated
          // Ensure only shoppingList object is being modified at the top level of the cycle document
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['shoppingList']) &&
          // Within shoppingList, ensure only 'items' and 'lastUpdatedAt' are changing
          request.resource.data.shoppingList.diff(resource.data.shoppingList).affectedKeys().hasOnly(['items', 'lastUpdatedAt']) &&
          // This is a basic check. True item-level validation (only onHand/toBePurchased changed, others same) is complex here.
          // We rely on client sending correct item structures and the affectedKeys checks above.
          // A Cloud Function for item updates would offer more robust validation.
          (request.resource.data.shoppingList.items.size() == resource.data.shoppingList.items.size() || request.resource.data.shoppingList.items == null && resource.data.shoppingList.items == null) // Basic check that no items were added/removed
          // Further check: ensure all non-updatable fields within each item remain unchanged.
          // This can be done by checking if for all i in 0..size-1: request.resource.data.shoppingList.items[i].name == resource.data.shoppingList.items[i].name etc.
          // This is hard to write concisely in rules. For now, we accept this level of granularity.
        )
      );

      allow delete: if false; // Meal cycles should generally not be deleted, perhaps archived
    }

    // Removed /votes/{voteId} rules block as voting is removed

    // Orders
    match /orders/{orderId} {
      // Allow reading order(s)
      // TODO: Allow admin/cook/shopper to read orders relevant to the cycle?
      allow read: if request.auth != null && 
                    (resource.data.userId == request.auth.uid || isAdmin());

      // Allow creating an order if:
      // 1. User is logged in.
      // 2. The order belongs to the logged-in user (userId matches auth.uid).
      // 3. The corresponding mealCycle exists and has status 'planned' or 'ordering_open' (adjust status check as needed).
      // 4. Order timestamp is set correctly.
      // 5. User hasn't already ordered in this cycle (checked via client query / complex rule).
      allow create: if request.auth != null
                      && request.resource.data.userId == request.auth.uid
                      && exists(/databases/$(database)/documents/mealCycles/$(request.resource.data.cycleId))
                      && get(/databases/$(database)/documents/mealCycles/$(request.resource.data.cycleId)).data.status in ['planned', 'ordering_open']
                      && request.time < get(/databases/$(database)/documents/mealCycles/$(request.resource.data.cycleId)).data.orderDeadline; // Ensure order before deadline

      // Allow updating own order *status* (by admin/cook) or details (by user *before* deadline)
      // Simplified for now: Allow owner to update anything (refine later!)
      // TODO: Refine update rules based on role, status, and deadline
      allow update: if request.auth != null && (
                      // User can update their own order before deadline
                      (resource.data.userId == request.auth.uid && 
                       request.time < get(/databases/$(database)/documents/mealCycles/$(resource.data.cycleId)).data.orderDeadline) ||
                      // Admin can update any order (e.g., status changes)
                      isAdmin()
                    );

      // Disallow delete for now (or restrict to user before deadline)
      allow delete: if request.auth != null && (
                      // User can delete their own order before deadline
                      (resource.data.userId == request.auth.uid && 
                       request.time < get(/databases/$(database)/documents/mealCycles/$(resource.data.cycleId)).data.orderDeadline) ||
                      // Admin can delete any order
                      isAdmin()
                    ); // Or just: if isAdmin(); if users cannot delete.
    }


    // Rules for application configuration (e.g., admin-settable defaults)
    match /app_config/{configId} {
      allow read, write: if isAdmin(); // Only admins can read/write app config
    }

    // Rules for user invitations
    match /invites/{inviteId} {
      // Create: Admin only. Cloud Function is primary enforcer, this is a backup.
      // Ensures required fields are present and correctly set by the admin creating it.
      allow create: if isAdmin() &&
                      request.resource.data.createdBy == request.auth.uid &&
                      request.resource.data.status == "pending" &&
                      request.resource.data.keys().hasAll(['email', 'status', 'createdAt', 'createdBy']) &&
                      request.resource.data.email is string &&
                      !request.resource.data.keys().hasAny(['acceptedByUid', 'acceptedAt']);

      // Read:
      // - Admins can get any invite or list all invites.
      // - Authenticated users can get a specific PENDING invite (for AcceptInvitePage).
      allow get: if isAdmin() || 
                   (request.auth != null && resource.data.status == "pending");
      allow list: if isAdmin();

      // Update:
      // - The user accepting the invite can update its status to 'accepted' and set their UID.
      //   This is done client-side from AcceptInvitePage after successful signup.
      //   `resource.data` is existing state, `request.resource.data` is new state.
      allow update: if request.auth != null &&
                      resource.data.status == "pending" && // Must be a pending invite
                      request.resource.data.status == "accepted" && // Changing to accepted
                      request.resource.data.acceptedByUid == request.auth.uid && // UID matches current user
                      request.resource.data.keys().hasAll(['email', 'status', 'createdAt', 'createdBy', 'acceptedByUid', 'acceptedAt']) &&
                      request.resource.data.email == resource.data.email && // Email cannot change
                      request.resource.data.createdBy == resource.data.createdBy; // Creator cannot change
                      // Future: || isAdmin() for admin updates like revoking.

      // Delete: Admins only
      allow delete: if isAdmin();
    }

    // Default Deny: Disallow read/write access to any other path not explicitly matched above.
    // This is important for security.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}