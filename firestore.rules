rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      // Assumes user profile exists and has a 'roles' array field
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             'admin' in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles;
    }

    // Allow users to create, read, and update their own user document
    match /users/{userId} {
      // Allow creation only if the user is logged in and their UID matches the document ID
      allow create: if request.auth != null && request.auth.uid == userId;
      // Allow reading and updating only by the owner of the document or by an admin
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      // Allow updating only by the owner of the document or by an admin
      allow update: if request.auth != null && 
                      (request.auth.uid == userId || isAdmin());
      // Prevent deletion for now
      allow delete: if false; // Or if isAdmin();
      // TODO: Add isAdmin field or use custom claims for admin role check
    }

    // Placeholder rule: Allow any authenticated user to read recipes for now
    // We'll refine this later based on roles (admin, cook, etc.)
    match /recipes/{recipeId} {
       allow read: if request.auth != null;
       // Allow create if user is logged in. We can restrict by role later.
       allow create: if request.auth != null; // TODO: Restrict to admin
       // Allow update/delete based on roles later (e.g., admin or original creator)
       allow update, delete: if isAdmin();
    }

    // Meal Cycles: Allow read by logged-in users, create/update by admins (needs role check)
    match /mealCycles/{cycleId} {
      allow read: if request.auth != null;
      // TODO: Implement admin check (e.g., using custom claims or user document field)
      // allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      allow create: if request.auth != null; // Placeholder: Restrict to admin

      // Allow admins to update cycle details (like chosenRecipe before deadline, status)
      // TODO: Implement admin check
      // allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      allow update: if request.auth != null; // Placeholder: Restrict to admin
      // TODO: Add rule for users to update specific fields if needed (e.g., sign-up)
      // TODO: Add rule to prevent changing chosenRecipe after orderDeadline has passed.

      allow delete: if false; // Meal cycles should generally not be deleted, perhaps archived
    }

    // Removed /votes/{voteId} rules block as voting is removed

    // Orders
    match /orders/{orderId} {
      // Allow reading order(s)
      // TODO: Allow admin/cook/shopper to read orders relevant to the cycle?
      allow read: if request.auth != null && 
                    (request.resource.data.userId == request.auth.uid || isAdmin());

      // Allow creating an order if:
      // 1. User is logged in.
      // 2. The order belongs to the logged-in user (userId matches auth.uid).
      // 3. The corresponding mealCycle exists and has status 'planned' or 'ordering_open' (adjust status check as needed).
      // 4. Order timestamp is set correctly.
      // 5. User hasn't already ordered in this cycle (checked via client query / complex rule).
      allow create: if request.auth != null
                      && request.resource.data.userId == request.auth.uid
                      && exists(/databases/$(database)/documents/mealCycles/$(request.resource.data.cycleId))
                      && get(/databases/$(database)/documents/mealCycles/$(request.resource.data.cycleId)).data.status in ['planned', 'ordering_open']
                      && request.time < get(/databases/$(database)/documents/mealCycles/$(request.resource.data.cycleId)).data.orderDeadline.toTimestamp(); // Ensure order before deadline

      // Allow updating own order *status* (by admin/cook) or details (by user *before* deadline)
      // Simplified for now: Allow owner to update anything (refine later!)
      // TODO: Refine update rules based on role, status, and deadline
      allow update: if request.auth != null && (
                      // User can update their own order before deadline
                      (request.resource.data.userId == request.auth.uid && 
                       request.time < get(/databases/$(database)/documents/mealCycles/$(request.resource.data.cycleId)).data.orderDeadline.toTimestamp()) ||
                      // Admin can update any order (e.g., status changes)
                      isAdmin()
                    );

      // Disallow delete for now (or restrict to user before deadline)
      allow delete: if request.auth != null && (
                      // User can delete their own order before deadline
                      (request.resource.data.userId == request.auth.uid && 
                       request.time < get(/databases/$(database)/documents/mealCycles/$(request.resource.data.cycleId)).data.orderDeadline.toTimestamp()) ||
                      // Admin can delete any order
                      isAdmin()
                    ); // Or just: if isAdmin(); if users cannot delete.
    }

    // Add rules for other collections (mealCycles, orders, etc.) here as needed.
    // It's crucial to define rules for every collection you use.

    // Default Deny: Disallow read/write access to any other path not explicitly matched above.
    // This is important for security.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}